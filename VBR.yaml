zabbix_export:
  version: '7.0'
  template_groups:
    - uuid: a571c0d144b14fd4a87a9d9b2aa9fcd6
      name: Templates/Applications
  templates:
    - uuid: 49b080e26826482998cfc52b0f9c812c
      template: 'VBR by HTTP'
      name: 'VBR by HTTP'
      description: |
        This template is designed to monitor Veeam Backup and Replication.
        
        NOTE: The RESTful API may not be available for some editions, see (https://www.veeam.com/licensing-pricing.html) for more details.
        
        Setup:
          1. Create a user to monitor the service or use an existing read-only account.
          See (https://helpcenter.veeam.com/docs/backup/vbr_rest/reference/vbr-rest-v1-rev2.html?ver=110#tag/Login/operation/CreateToken!path=grant_type&t=request) for more details. 
          2. Link the template to a host.
          3. Configure the following macros: {$VEEAM.API.URL}, {$VEEAM.USER}, and {$VEEAM.PASSWORD}.
        
        You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/
        
        Generated by official Zabbix template tool "Templator"
      groups:
        - name: Templates/Applications
      items:
        - uuid: f89cabf146894046a5accdfd25f31533
          name: 'Get errors'
          type: DEPENDENT
          key: veeam.get.errors
          delay: '0'
          value_type: TEXT
          trends: '0'
          description: 'The errors from API requests.'
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.error
              error_handler: CUSTOM_VALUE
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 1h
          master_item:
            key: veeam.get.metrics
          tags:
            - tag: component
              value: status
          triggers:
            - uuid: 9b1552e32f464a1a959d0472a70fe532
              expression: 'length(last(/VBR by HTTP/veeam.get.errors))>0'
              name: 'There are errors in requests to API'
              opdata: '{ITEM.LASTVALUE1}'
              priority: AVERAGE
              description: 'Zabbix has received errors in response to API requests.'
              tags:
                - tag: scope
                  value: availability
        - uuid: ed998933a3174aed8f03e1d18ee4fc2e
          name: 'Get metrics'
          type: SCRIPT
          key: veeam.get.metrics
          history: '0'
          value_type: TEXT
          trends: '0'
          params: |
            var Veeam = {
            	params: {},
            	token: '',
            
            	setParams: function (params) {
            		['api_endpoint', 'user', 'password', 'created_after'].forEach(function (field) {
            			if (typeof params !== 'object' || typeof params[field] === 'undefined' || params[field] === '') {
            				throw 'Required param is not set: ' + field + '.';
            			}
            		});
            
            		Veeam.params = params;
            		if (typeof Veeam.params.api_endpoint === 'string' && !Veeam.params.api_endpoint.endsWith('/')) {
            			Veeam.params.api_endpoint += '/';
            		}
            		if (Veeam.params.created_after >= 365 || Veeam.params.created_after <= 1) {
            			throw 'Incorrect "created_after" parameter given: ' + Veeam.params.created_after + '\nMust be between 1 and 365 days.';
            		}
            	},
            
            	login: function () {
            
            		var resp, login = new HttpRequest();
            		if (typeof Veeam.params.http_proxy !== 'undefined' && Veeam.params.http_proxy !== '') {
            			login.setProxy(Veeam.params.http_proxy);
            		}
            		login.addHeader('Content-Type: application/x-www-form-urlencoded');
            		login.addHeader('x-api-version: 1.0-rev2');
            		resp = login.post(Veeam.params.api_endpoint + 'api/oauth2/token',
            			'grant_type=password&username=' + encodeURIComponent(Veeam.params.user) + '&password=' + encodeURIComponent(Veeam.params.password));
            
            		if (login.getStatus() !== 200 || resp === null) {
            			throw 'Login failed with status code ' + login.getStatus() + ': ' + resp;
            		}
            
            		try {
            			resp = JSON.parse(resp);
            		}
            		catch (error) {
            			throw 'Failed to parse authentication token for the logon session.';
            		}
            		if (!resp.hasOwnProperty('access_token')) {
            			throw 'Auth response does not contain access token.';
            		}
            		Veeam.token = resp['access_token'];
            
            	},
            
            	request: function (url) {
            
            		var response, request = new HttpRequest();
            		if (typeof Veeam.params.http_proxy !== 'undefined' && Veeam.params.http_proxy !== '') {
            			request.setProxy(Veeam.params.http_proxy);
            		}
            		if (Veeam.token) {
            			request.addHeader('Authorization: Bearer ' + Veeam.token);
            			request.addHeader('x-api-version: 1.0-rev2');
            			response = request.get(url);
            		}
            		if (request.getStatus() !== 200 || response === null) {
            			throw 'Request failed with status code ' + request.getStatus() + ': ' + response;
            		}
            		try {
            			return JSON.parse(response);
            		}
            		catch (error) {
            			throw 'Failed to parse response received from API.';
            		}
            	},
            
            	getMetricsData: function () {
            		var data = {};
            		ms = 86400000;
            		start_date = new Date((new Date().getTime()) - ms * Veeam.params.created_after).toISOString().replace(/\.\d+/, '');
            		endpoints = {
            			'proxies': 'api/v1/backupInfrastructure/proxies',
            			'managedServers': 'api/v1/backupInfrastructure/managedServers',
            			'repositories_states': 'api/v1/backupInfrastructure/repositories/states',
            			'jobs_states': 'api/v1/jobs/states',
            			'sessions': 'api/v1/sessions?createdAfterFilter=' + encodeURIComponent(start_date)
            		};
            
            		Object.keys(endpoints).forEach(function (key) {
            			data[key] = Veeam.request(Veeam.params.api_endpoint + endpoints[key]);
            		});
            
            		return data;
            	}
            };
            
            try {
            	Veeam.setParams(JSON.parse(value));
            	Veeam.login();
            	return JSON.stringify(Veeam.getMetricsData());
            }
            catch (error) {
            	error += (String(error).endsWith('.')) ? '' : '.';
            	Zabbix.log(3, '[ VEEAM ] ERROR: ' + error);
            	return JSON.stringify({ 'error': error });
            }
          description: 'The result of API requests is expressed in the JSON.'
          timeout: '{$VEEAM.DATA.TIMEOUT}'
          parameters:
            - name: api_endpoint
              value: '{$VEEAM.API.URL}'
            - name: created_after
              value: '{$CREATED.AFTER}'
            - name: http_proxy
              value: '{$VEEAM.HTTP.PROXY}'
            - name: password
              value: '{$VEEAM.PASSWORD}'
            - name: user
              value: '{$VEEAM.USER}'
          tags:
            - tag: component
              value: raw
      discovery_rules:
        - uuid: 270018dddcc145908807fefe5c9bbcd4
          name: 'Jobs states discovery'
          type: DEPENDENT
          key: veeam.job.state.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#JOB.STATUS}'
                value: '{$JOB.STATUS.MATCHES}'
                formulaid: A
              - macro: '{#JOB.STATUS}'
                value: '{$JOB.STATUS.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#NAME}'
                value: '{$JOB.NAME.MATCHES}'
                formulaid: C
              - macro: '{#NAME}'
                value: '{$JOB.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
              - macro: '{#TYPE}'
                value: '{$JOB.TYPE.MATCHES}'
                formulaid: E
              - macro: '{#TYPE}'
                value: '{$JOB.TYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: F
          description: 'Discovery of the jobs states.'
          item_prototypes:
            - uuid: cd8b12b0130e4b19839c738eec1064f5
              name: '{#NAME}'
              type: DEPENDENT
              key: 'veeam.jobs.last.result[{#ID}]'
              delay: '0'
              trends: '0'
              description: 'The result of the session. The enums used: `None`, `Success`, `Warning`, `Failed`.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.lastResult
                - type: JAVASCRIPT
                  parameters:
                    - |
                      return {
                        "Success": 0,
                        "Failed": 1,
                        "Warning": 2,
                      }[value];
              master_item:
                key: 'veeam.jobs.states.raw[{#ID}]'
              tags:
                - tag: component
                  value: jobs
                - tag: job
                  value: '{#NAME}'
                - tag: workload
                  value: '{#WORKLOAD}'
              trigger_prototypes:
                - uuid: 52b1d706c6a8414ebb5d68ece7017dd6
                  expression: 'find(/VBR by HTTP/veeam.jobs.last.result[{#ID}],,"like","Failed")=1'
                  name: 'Last result job failed'
                  event_name: 'Failed job [{#NAME}]'
                  priority: AVERAGE
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
            - uuid: 032b03e5c7c24c00a46a656e40d5773e
              name: 'Job states [{#NAME}] [{#TYPE}]: Get data'
              type: DEPENDENT
              key: 'veeam.jobs.states.raw[{#ID}]'
              delay: '0'
              history: '0'
              value_type: TEXT
              trends: '0'
              description: 'Gets raw data from the job states with the name `[{#NAME}]`.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.jobs_states.data.[?(@.id==''{#ID}'')].first()'
              master_item:
                key: veeam.get.metrics
              tags:
                - tag: component
                  value: jobs
                - tag: component
                  value: raw
          master_item:
            key: veeam.get.metrics
          lld_macro_paths:
            - lld_macro: '{#ID}'
              path: $.id
            - lld_macro: '{#JOB.STATUS}'
              path: $.status
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#REPOSITORY.NAME}'
              path: $.repositoryName
            - lld_macro: '{#TYPE}'
              path: $.type
            - lld_macro: '{#WORKLOAD}'
              path: $.workload
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.jobs_states.data
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
        - uuid: fd40706a0b8b43e1886c0946814b295c
          name: 'Sessions discovery'
          type: DEPENDENT
          key: veeam.sessions.discovery
          delay: '0'
          filter:
            evaltype: AND
            conditions:
              - macro: '{#NAME}'
                value: '{$SESSION.NAME.MATCHES}'
                formulaid: A
              - macro: '{#NAME}'
                value: '{$SESSION.NAME.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: B
              - macro: '{#TYPE}'
                value: '{$SESSION.TYPE.MATCHES}'
                formulaid: C
              - macro: '{#TYPE}'
                value: '{$SESSION.TYPE.NOT_MATCHES}'
                operator: NOT_MATCHES_REGEX
                formulaid: D
          description: 'Discovery of sessions.'
          item_prototypes:
            - uuid: 8d84830cfcc349ce9aea0223665d8f8c
              name: 'Session [{#NAME}] [{#TYPE}]: Get data'
              type: DEPENDENT
              key: 'veeam.sessions.raw[{#ID}]'
              delay: '0'
              history: '0'
              value_type: TEXT
              trends: '0'
              status: DISABLED
              discover: NO_DISCOVER
              description: 'Gets raw data from session with the name: `[{#NAME}]`, `[{#TYPE}]`.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - '$.sessions.data.[?(@.id==''{#ID}'')].first()'
                  error_handler: DISCARD_VALUE
              master_item:
                key: veeam.get.metrics
              tags:
                - tag: component
                  value: raw
                - tag: session
                  value: '{#NAME}'
            - uuid: 2f85f36d5c9f4db4ad25f7d4e84069ab
              name: 'Session [{#NAME}] [{#TYPE}]: Result'
              type: DEPENDENT
              key: 'veeam.sessions.result[{#ID}]'
              delay: '0'
              value_type: TEXT
              trends: '0'
              description: 'The result of the session. The enums used: `None`, `Success`, `Warning`, `Failed`.'
              preprocessing:
                - type: JSONPATH
                  parameters:
                    - $.result.result
              master_item:
                key: 'veeam.sessions.raw[{#ID}]'
              tags:
                - tag: component
                  value: sessions
                - tag: creation-date
                  value: '{#CREATION.TIME}'
                - tag: session
                  value: '{#NAME}'
              trigger_prototypes:
                - uuid: 09419416177a4eb38ca09628a585cd24
                  expression: 'find(/VBR by HTTP/veeam.sessions.result[{#ID}],,"like","Failed")=1'
                  name: 'Last result session failed'
                  event_name: 'Failed session [{#NAME}]'
                  priority: AVERAGE
                  manual_close: 'YES'
                  tags:
                    - tag: scope
                      value: availability
          master_item:
            key: veeam.get.metrics
          lld_macro_paths:
            - lld_macro: '{#CREATION.TIME}'
              path: $.creationTime
            - lld_macro: '{#END.TIME}'
              path: $.endTime
            - lld_macro: '{#ID}'
              path: $.id
            - lld_macro: '{#NAME}'
              path: $.name
            - lld_macro: '{#STATE}'
              path: $.state
            - lld_macro: '{#TYPE}'
              path: $.sessionType
          preprocessing:
            - type: JSONPATH
              parameters:
                - $.sessions.data
            - type: JAVASCRIPT
              parameters:
                - |
                  obj = JSON.parse(value, function (key, value) {
                  	if (key == 'creationTime') return new Date(value).toDateString();
                  	return value;
                  });
                  return JSON.stringify(obj);
            - type: DISCARD_UNCHANGED_HEARTBEAT
              parameters:
                - 6h
      tags:
        - tag: class
          value: software
        - tag: target
          value: veeam
      macros:
        - macro: '{$CREATED.AFTER}'
          value: '7'
          description: 'Returns sessions that are created after chosen days.'
        - macro: '{$JOB.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$JOB.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$JOB.STATUS.MATCHES}'
          value: '.*'
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$JOB.STATUS.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$JOB.TYPE.MATCHES}'
          value: '.*'
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$JOB.TYPE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in discovery rule to evaluate the states of jobs.'
        - macro: '{$PROXIES.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in proxies discovery rule.'
        - macro: '{$PROXIES.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in proxies discovery rule.'
        - macro: '{$PROXIES.TYPE.MATCHES}'
          value: '.*'
          description: 'This macro is used in proxies discovery rule.'
        - macro: '{$PROXIES.TYPE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in proxies discovery rule.'
        - macro: '{$REPOSITORIES.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in repositories discovery rule.'
        - macro: '{$REPOSITORIES.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in repositories discovery rule.'
        - macro: '{$REPOSITORIES.TYPE.MATCHES}'
          value: '.*'
          description: 'This macro is used in repositories discovery rule.'
        - macro: '{$REPOSITORIES.TYPE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in repositories discovery rule.'
        - macro: '{$SESSION.NAME.MATCHES}'
          value: '.*'
          description: 'This macro is used in discovery rule to evaluate sessions.'
        - macro: '{$SESSION.NAME.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in discovery rule to evaluate sessions.'
        - macro: '{$SESSION.TYPE.MATCHES}'
          value: '.*'
          description: 'This macro is used in discovery rule to evaluate sessions.'
        - macro: '{$SESSION.TYPE.NOT_MATCHES}'
          value: CHANGE_IF_NEEDED
          description: 'This macro is used in discovery rule to evaluate sessions.'
        - macro: '{$VEEAM.API.URL}'
          value: 'https://localhost:9419'
          description: 'The Veeam API endpoint is a URL in the format `<scheme>://<host>:<port>`.'
        - macro: '{$VEEAM.DATA.TIMEOUT}'
          value: '10'
          description: 'A response timeout for the API.'
        - macro: '{$VEEAM.HTTP.PROXY}'
          description: 'Sets the HTTP proxy to `http_proxy` value. If this parameter is empty, then no proxy is used.'
        - macro: '{$VEEAM.PASSWORD}'
          description: 'The `password` of the Veeam Backup and Replication account. It is used to obtain an access token.'
        - macro: '{$VEEAM.USER}'
          description: 'The `username` of the Veeam Backup and Replication account. It is used to obtain an access token.'
      valuemaps:
        - uuid: 63e7cdabb67246a6bd4cb6478ffde015
          name: veeam.jobs.last.result
          mappings:
            - value: '0'
              newvalue: Success
            - value: '1'
              newvalue: Failed
            - value: '2'
              newvalue: Warning
